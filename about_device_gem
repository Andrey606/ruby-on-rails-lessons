Device gem

https://github.com/heartcombo/devise

# add devise gem for authentify
1) add gem to gemfile
gem 'devise'
2) bundle install --without production
3) rails generate devise:install

# generate user model
rails generate devise User
rails db:migrate

# можно в контролер добавлять теперь
before_action :authenticate_user!
и эта шняга сама генерит  форму для логина и не будет открывать ни одной страници из этого контролера пока не залогинится

# добавить подсказки  и ошибки
добавить это в aplication.html.erb
<p class="notice"><%= notice %></p>
<p class="alert"><%= alert %></p>

# по дефолту штмл сгенерених страниц скрыт в геме но можно кастомизировать


# devise-bootstarp 
https://github.com/hisea/devise-bootstrap-views
# чтобы добавить бутстрап и мочь менять стиль страницм сгенереный от девайса
1) добавь гем gem 'devise-bootstrap-views', '~> 1.0'
2) сгенери вью rails generate devise:views:bootstrap_templates
3) bundle install











# how to create devise
# to start add to gemfile =================================
gem 'devise'
gem 'twitter-bootstrap-rails'
gem 'devise-bootstrap-views'

# rails g devise:install
# rails g devise User
invoke  active_record
create    db/migrate/20211212135926_devise_create_users.rb
create    app/models/user.rb
invoke    test_unit
create      test/models/user_test.rb
create      test/fixtures/users.yml
insert    app/models/user.rb
route  devise_for :users

# how to add comfortable
1) uncoment comfortable part in new generated migration file
2) add to User model ":confirmable"
3) rails db:migrate
4) in application controller add 'before_action :authenticate_user!'
5) add in welcome controller 'skip_before_action :authenticate_user!, only: [:index]' to avoid authenticate_user! in welcome page

# then we cann style this
1)rails g bootstrap:install static
create  app/assets/javascripts/application.js
create  app/assets/javascripts/bootstrap.js
create  app/assets/stylesheets/bootstrap_and_overrides.css
create  config/locales/en.bootstrap.yml
gsub  app/assets/stylesheets/application.css
2) rails g bootstrap:layout application
3) rails g devise:views:locale en
4) rails g devise:views:bootstrap_templates
create  app/views/devise
create  app/views/devise/confirmations/new.html.erb
create  app/views/devise/passwords/edit.html.erb
create  app/views/devise/passwords/new.html.erb
create  app/views/devise/registrations/edit.html.erb
create  app/views/devise/registrations/new.html.erb
create  app/views/devise/sessions/new.html.erb
create  app/views/devise/shared/_links.html.erb
create  app/views/devise/unlocks/new.html.erb
5) add to gemfile "gem 'jquery-rails'"
5) delete 5 links in /views/layouts/application.html.erb file  
6) add folowing in application.js file
//= require rails-ujs
//= require activestorage
//= require turbolinks
//= require_tree .
// Loads all Semantic javascripts
//= require jquery
//= require semantic-ui
7) add to manifest.js
//= link_tree ../images
//= link_directory ../stylesheets .css
//= link application.js

# then setup SMTP
# sendgrid API key
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

# to setap confirmation vi email you need to get api gey ftom smtp server(sendgrid)
and then setup fiew files
1)environment.rb:
ActionMailer::Base.smtp_settings = {
  :address => 'smtp.sendgrid.net',
  :port => '587',
  :authentication => :plain,
  :user_name => ENV['SENDGRID_USERNAME'],
  :password => ENV['SENDGRID_PASSWORD'],
  :domain => 'heroku.com',
  :enable_starttls_auto => true
}
2) production.rb
config.action_mailer.delivery_method = :smtp
config.action_mailer.default_url_options = {
  :host => 'andrews-photo-app-6.herokuapp.com:3000',
  :protocol => 'https'
}
3) development.rb
config.action_mailer.delivery_method = :test
config.action_mailer.default_url_options = {
  :host => 'localhost:3000'
}
4) and setup env variables
heroku config:set SENDGRID_USERNAME=apikey
heroku config:set SENDGRID_PASSWORD=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

# sendgrid

# README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


### setup sendgrid 

echo "export SENDGRID_API_KEY='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'" > sendgrid.env
echo "export SENDGRID_USERNAME='apikey'" > sendgrid.env
echo "sendgrid.env" >> .gitignore
source ./sendgrid.env



# 2

gem 'sendgrid-ruby'

bundler
or
gem install sendgrid-ruby

# 3 send your email

# using SendGrid's Ruby Library
# https://github.com/sendgrid/sendgrid-ruby
require 'sendgrid-ruby'
include SendGrid

from = Email.new(email: 'test@example.com')
to = Email.new(email: 'test@example.com')
subject = 'Sending with SendGrid is Fun'
content = Content.new(type: 'text/plain', value: 'and easy to do anywhere, even with Ruby')
mail = Mail.new(from, subject, to, content)

sg = SendGrid::API.new(api_key: ENV['SENDGRID_API_KEY'])
response = sg.client.mail._('send').post(request_body: mail.to_json)
puts response.status_code
puts response.body
puts response.headers


--------------------
heroku config:set SENDGRID_USERNAME=apikey
heroku config:set SENDGRID_API_KEY=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
