RAILS 6

rails commands 

# create new
rails new <project_name>
rails new your-green-factory

rails webpacker:install

# create new с версией рельсов
rails _5.2.4.1_ new test_app_5


# controller generator
rails generate controller <name>

# controller generator
rails generate controller <name> <index>

rails destroy controller <name>

rails generate channel  chatroom

# CRUD generator (controller view model route)
rails generate scaffold Article title:string description:text

# CRUD generator (model test)
rails generate model user

# check routes 
rails routes --expanded
rails routes --expanded | grep edit

# migration file generator
rails generate migration create_articles
rails db:migrate
rails db:rollback
rails db:seed

# rails console
rails console

# db is conected?
<db_name>.all

# clean irb
ctrl+l

# create new column in db
<ModelName>.create(title: "qwe", description: "sds")

# read column with id
<ModelName>.find(2)
<ModelName>.first
<ModelName>.last
<ModelName>.all

User.find(1) # returns the user
User.find_by_id(1) # returns the user
User.where(id: 1).first # returns the user
2) if id=2 dont exsist
User.find(2) # raises an exception
User.find_by_id(2) # nil
User.where(id: 2).first # nil
User.find_by(id: 1)

# (edit)save into db
<variable> = <ModelName>.find(2)
<variable>.title = "edited title"
<variable>.save

# delete row in db
<variable> = <ModelName>.last
<variable>.destroy

# reload irb (needs after modifiing a model)
reload!

# check db errors
article.errors
article.errors.full_messages

# to run debug
write 'byebug' into the code and then type 'continue' to continue

# if i have any changes in gem file (before production)
bundle install --without production

# add bootstarap 4.4 into rails6 https://www.mashrurhossain.com/blog/rails6bootstrap4
1) yarn add bootstrap@4.4.1 jquery popper.js
2) add "*= require bootstrap" into application.css
3) add: 
const webpack = require('webpack')

environment.plugins.append("Provide", new webpack.ProvidePlugin({
  $: 'jquery',
  jQuery: 'jquery',
  Popper: ['popper.js', 'default']
}))
into environment.js

4) add 'import "bootstrap"' into aplication.js

5) app/helper - используется чтобы можно было добавлять вспомагательные функции для использования во view

# display info messages
flash[:notice] = "Article was updated succesfuly."

# если в таблице значение bool, то можно так проверять
User.admin?

# а также можно менять значение поля таблици
user = User.first
user.toggle!(:admin)

# Permisiion table
1) needs Permisiion table - for system like CRM
2) have string field in table user
3) have bool field in user table

#delete all items in table
User.delete.all


# pretty otput of db in console
gem 'hirb'
Hirb.enable

# generate model
rails g model Stock ticker:string name:string last_price:decimal


# в моделях можно создавать свои методы

# для хранения токенов в зашифрованом состоянии используется два файла
1) config/credentials.yml.enc - пушится в гит там хранится токен в зашифрованом виде
2) config/master.key - используется для расшифровки, он не пушится в гит, его нужно передавать как то иначе чтобы другой человек смог разшифровать  
3) чтобы сгенерить мастер кей файл(если его еще нет) - $ EDITOR=vim rails credentials:edit
4) чтобы прочесть зашифрованые данные - EDITOR="atom --wait" rails credentials:edit
5) чтобы получить доступ к переменой aws из кода - Rails.application.credentials.aws[:access_key_id] 

# для дебага можно использовать
render json: <ruby variable>


# generate resources many-to-many (controller view model route db migration)
# Чтобы создать новую модель, соответствующую таблицу базы данных, контроллер и пустую папку 
# представлений, введите:
rails g resource UserStock user:references stock:references
=>


# add 
usr.stocks << stock

# 
squash делать когда в существующий пул реквест добавляем изменения и мы хоти чтобы в результате получился один комит

# kill the process
lsof -wni tcp:3000
kill -9 <PID>


# to debug in slim file 
= debug @company_lookups.first.name

# run rspec test
bundle exec rspec

# how to generate many-to-many table via cli
rails g resource UserStock user:referces stock:references
# will generate: model, controller, controller helper, add route, migration file, test file for controller and model

# delegate modificator
delegate :hello, to: :greeter #give access to hello method from greeter class

# generate controller welcome and add index for it (also create routes and some test) 
# route will be "localhost:3000/welcome/index"
rails g controller welcome index

# sendgrid API key
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

# to setap confirmation vi email you need to get api gey ftom smtp server(sendgrid)
and then setup fiew files

# how to embedd html into rails link_to
<%= link_to ('<i class="fa fa-user"></i> ' + truncate(current_user.email, length: 25)).html_safe,
                  edit_user_registration_path, title: 'Edit profile' %>

# to get config data from heroku
heroku config:get SENDGRID_USERNAME

# virtual property
It is exists but when we give form object with virtual property it will not be saved in module

# sorting
# divide on two groups and sort inside each separately
line_items.sort_by{ |line_item| [line_item.line_type, line_item.id] }.each do |line_item|

# to setup system variables

# controller attributes
before_action
after_action
skip_before_action

# model attributes
has_many 
has_one
belongs_to
accepts_nested_attributes_for # позволяет создать обькт и сразу проинициилизировать и создать этот обькт
attr_accessor # is used to define an attribute for object of Model which is not mapped with any column in database. This answers question - What is attr_accessor in Rails.

# viev commands
<%= fields_for( :payments ) %>

# embed jsvascript into *.html.erb file
<script language="Javacript">
  ... js code ...
</script>